#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 64
#define SCREEN_HEIGHT 32

Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);


const uint8_t chip8_rom[] PROGMEM = {
0x00, 0xE0, 0x61, 0x01, 0x60, 0x08, 0xA2, 0x50, 0xD0, 0x1F, 0x60, 0x10, 0xA2, 0x5F, 0xD0, 0x1F,
0x60, 0x18, 0xA2, 0x6E, 0xD0, 0x1F, 0x60, 0x20, 0xA2, 0x7D, 0xD0, 0x1F, 0x60, 0x28, 0xA2, 0x8C,
0xD0, 0x1F, 0x60, 0x30, 0xA2, 0x9B, 0xD0, 0x1F, 0x61, 0x10, 0x60, 0x08, 0xA2, 0xAA, 0xD0, 0x1F,
0x60, 0x10, 0xA2, 0xB9, 0xD0, 0x1F, 0x60, 0x18, 0xA2, 0xC8, 0xD0, 0x1F, 0x60, 0x20, 0xA2, 0xD7,
0xD0, 0x1F, 0x60, 0x28, 0xA2, 0xE6, 0xD0, 0x1F, 0x60, 0x30, 0xA2, 0xF5, 0xD0, 0x1F, 0x12, 0x4E,
0x0F, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x1F, 0x3F, 0x71, 0xE0, 0xE5, 0xE0, 0xE8, 0xA0,
0x0D, 0x2A, 0x28, 0x28, 0x28, 0x00, 0x00, 0x18, 0xB8, 0xB8, 0x38, 0x38, 0x3F, 0xBF, 0x00, 0x19,
0xA5, 0xBD, 0xA1, 0x9D, 0x00, 0x00, 0x0C, 0x1D, 0x1D, 0x01, 0x0D, 0x1D, 0x9D, 0x01, 0xC7, 0x29,
0x29, 0x29, 0x27, 0x00, 0x00, 0xF8, 0xFC, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x49, 0x4A, 0x49,
0x48, 0x3B, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0xF0, 0x30, 0x90, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0xFE, 0xC7, 0x83, 0x83, 0x83, 0xC6, 0xFC, 0xE7, 0xE0, 0xE0, 0xE0, 0xE0, 0x71,
0x3F, 0x1F, 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x39, 0x38, 0x38, 0x38, 0x38, 0xB8, 0xB8,
0x38, 0x00, 0x00, 0x31, 0x4A, 0x79, 0x40, 0x3B, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
0x00, 0x00, 0xA0, 0x38, 0x20, 0xA0, 0x18, 0xCE, 0xFC, 0xF8, 0xC0, 0xD4, 0xDC, 0xC4, 0xC5, 0x00,
0x00, 0x30, 0x44, 0x24, 0x14, 0x63, 0xF1, 0x03, 0x07, 0x07, 0x77, 0x17, 0x63, 0x71, 0x00, 0x00,
0x28, 0x8E, 0xA8, 0xA8, 0xA6, 0xCE, 0x87, 0x03, 0x03, 0x03, 0x87, 0xFE, 0xFC, 0x00, 0x00, 0x60,
0x90, 0xF0, 0x80, 0x70, 
};

/*
0x12, 0x8A, 0x80, 0x7C, 0x01, 0x6D, 0x00, 0x22, 0x21, 0x68, 0x39, 0x43, 0x88, 0xA2, 0x38, 0xDD,
0xC1, 0x7D, 0x3D, 0x40, 0x07, 0x7B, 0xEE, 0x69, 0xD0, 0xB1, 0x4F, 0x79, 0x02, 0x70, 0xFF, 0x04,
0x62, 0x8E, 0x72, 0x8F, 0x90, 0x27, 0x45, 0xE0, 0x6C, 0x05, 0x8B, 0xC0, 0x7A, 0x60, 0x1F, 0x81,
0x11, 0xA0, 0x87, 0xF0, 0x33, 0xF2, 0x65, 0x64, 0x29, 0x63, 0xD3, 0xF1 ,0x73, 0x6A, 0x14, 0x53, 
0x03, 0x4C,
*/

const uint8_t chip8_rom1[] PROGMEM = {
0x00, 0xE0, 0x61, 0x01, 0x60, 0x08, 0xA2, 0x50, 0xD0, 0x1F, 0x60, 0x10, 0xA2, 0x5F, 0xD0, 0x1F,
0x60, 0x18, 0xA2, 0x6E, 0xD0, 0x1F, 0x60, 0x20, 0xA2, 0x7D, 0xD0, 0x1F, 0x60, 0x28, 0xA2, 0x8C,
0xD0, 0x1F, 0x60, 0x30, 0xA2, 0x9B, 0xD0, 0x1F, 0x61, 0x10, 0x60, 0x08, 0xA2, 0xAA, 0xD0, 0x1F,
0x60, 0x10, 0xA2, 0xB9, 0xD0, 0x1F, 0x60, 0x18, 0xA2, 0xC8, 0xD0, 0x1F, 0x60, 0x20, 0xA2, 0xD7,
0xD0, 0x1F, 0x60, 0x28, 0xA2, 0xE6, 0xD0, 0x1F, 0x60, 0x30, 0xA2, 0xF5, 0xD0, 0x1F, 0x12, 0x4E,
0x0F, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x1F, 0x3F, 0x71, 0xE0, 0xE5, 0xE0, 0xE8, 0xA0,
0x0D, 0x2A, 0x28, 0x28, 0x28, 0x00, 0x00, 0x18, 0xB8, 0xB8, 0x38, 0x38, 0x3F, 0xBF, 0x00, 0x19,
0xA5, 0xBD, 0xA1, 0x9D, 0x00, 0x00, 0x0C, 0x1D, 0x1D, 0x01, 0x0D, 0x1D, 0x9D, 0x01, 0xC7, 0x29,
0x29, 0x29, 0x27, 0x00, 0x00, 0xF8, 0xFC, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x49, 0x4A, 0x49,
0x48, 0x3B, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0xF0, 0x30, 0x90, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0xFE, 0xC7, 0x83, 0x83, 0x83, 0xC6, 0xFC, 0xE7, 0xE0, 0xE0, 0xE0, 0xE0, 0x71,
0x3F, 0x1F, 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x39, 0x38, 0x38, 0x38, 0x38, 0xB8, 0xB8,
0x38, 0x00, 0x00, 0x31, 0x4A, 0x79, 0x40, 0x3B, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
0x00, 0x00, 0xA0, 0x38, 0x20, 0xA0, 0x18, 0xCE, 0xFC, 0xF8, 0xC0, 0xD4, 0xDC, 0xC4, 0xC5, 0x00,
0x00, 0x30, 0x44, 0x24, 0x14, 0x63, 0xF1, 0x03, 0x07, 0x07, 0x77, 0x17, 0x63, 0x71, 0x00, 0x00,
0x28, 0x8E, 0xA8, 0xA8, 0xA6, 0xCE, 0x87, 0x03, 0x03, 0x03, 0x87, 0xFE, 0xFC, 0x00, 0x00, 0x60,
0x90, 0xF0, 0x80, 0x70
};


const uint8_t chip8_rom2[] PROGMEM = {
0x60, 0x0A, 0x65, 0x05, 0x66, 0x0A, 0x67, 0x0F, 0x68, 0x14, 0x61, 0x01, 0x62, 0x01, 0x63, 0x01,
0x64, 0x01, 0x60, 0x0A, 0xA2, 0x78, 0xD0, 0x56, 0x70, 0x0A, 0xA2, 0x7E, 0xD0, 0x66, 0x70, 0x0A,
0xA2, 0x84, 0xD0, 0x76, 0x70, 0x0A, 0xA2, 0x8A, 0xD0, 0x86, 0x6A, 0x03, 0xFA, 0x15, 0x60, 0x0A,
0xA2, 0x78, 0xD0, 0x56, 0x45, 0x14, 0x61, 0xFF, 0x45, 0x01, 0x61, 0x01, 0x85, 0x14, 0xD0, 0x56,
0x70, 0x0A, 0xA2, 0x7E, 0xD0, 0x66, 0x46, 0x14, 0x62, 0xFF, 0x46, 0x01, 0x62, 0x01, 0x86, 0x24,
0xD0, 0x66, 0x70, 0x0A, 0xA2, 0x84, 0xD0, 0x76, 0x47, 0x14, 0x63, 0xFF, 0x47, 0x01, 0x63, 0x01,
0x87, 0x34, 0xD0, 0x76, 0x70, 0x0A, 0xA2, 0x8A, 0xD0, 0x86, 0x48, 0x14, 0x64, 0xFF, 0x48, 0x01,
0x64, 0x01, 0x88, 0x44, 0xD0, 0x86, 0x12, 0x2A, 0xFF, 0x03, 0x0C, 0x30, 0xC0, 0xFF, 0xFF, 0xC0,
0xC0, 0xFC, 0xC0, 0xFF, 0xF0, 0xCC, 0xCC, 0xF0, 0xCC, 0xC3, 0x3C, 0xC3, 0xC3, 0xC3, 0xC3, 0x3C,
};

/*
0x60, 0x0A, 0x65, 0x05, 0x66, 0x67, 0x0F, 0x68, 0x14, 0x61, 0x01, 0x62, 0x63, 0x64, 0xA2, 0x78, 
0xD0, 0x56, 0x70, 0x7E, 0x84, 0x76, 0x8A, 0x86, 0x6A, 0x03, 0xFA, 0x15, 0x45, 0xFF, 0x85, 0x46,
0x24, 0x47, 0x87, 0x34, 0x48, 0x88, 0x44, 0x12, 0x2A, 0x0C, 0x30, 0xC0, 0xFC, 0xF0, 0xCC, 0xC3,
0x3C
*/





int key = 17;
uint8_t check = 0xFF;

const uint8_t font[] PROGMEM = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70, 0xF0, 0x10, 0xF0, 0x80, 0xF0, 0xF0,
    0x10, 0xF0, 0x10, 0xF0, 0x90, 0x90, 0xF0, 0x10, 0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80,
    0xF0, 0x90, 0xF0, 0xF0, 0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0,
    0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0, 0xF0, 0x80, 0x80, 0x80,
    0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80
};

const uint8_t hexdecs[] PROGMEM = {
  0x30,0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46
};


typedef enum {
    QUIT,
    RUNNING,
    PAUSED,
} emulator_state_t;

typedef struct {
    uint16_t opcode;
    uint16_t NNN;
    uint8_t NN;
    uint8_t N;
    uint8_t X;
    uint8_t Y;
} instruction_t;

typedef struct {
    emulator_state_t state;
    uint16_t stack[12];
    uint16_t *stack_ptr;
    uint8_t V[16];
    uint16_t I;
    uint16_t PC;
    uint8_t delay_timer;
    uint8_t sound_timer;
    bool keypad[16];
    instruction_t instruct;
} chip8_t;

chip8_t chip8 = {0};

int timer = 0;
int sound_timer = 0;
int last_timer_update = 0;

bool init_chip8() {
    // В эту версию эмулятора ROM и шрифт не копируются.
    chip8.PC = 0;
    chip8.state = RUNNING;
    chip8.stack_ptr = &chip8.stack[0];

    return true;
}

void emulate_instruction(chip8_t* chip8) {
    chip8->instruct.opcode = pgm_read_byte(&chip8_rom[chip8->PC]) << 8 | pgm_read_byte(&chip8_rom[chip8->PC + 1]);
    chip8->instruct.NNN = chip8->instruct.opcode & 0X0FFF - 0x200;
    chip8->instruct.NN = chip8->instruct.opcode & 0x0FF;
    chip8->instruct.N = chip8->instruct.opcode & 0x0F;
    chip8->instruct.X = (chip8->instruct.opcode >> 8) & 0x0F;
    chip8->instruct.Y = (chip8->instruct.opcode >> 4) & 0x0F;

    Serial.print("Opcode: ");
    Serial.println(chip8->instruct.opcode, HEX);

    switch ((chip8->instruct.opcode >> 12) & 0x0F) {
        case 0x0:
            if (chip8->instruct.NN == 0xE0) {
                oled.clearDisplay();
                chip8->PC += 2;
                Serial.println("Clearing display");
            } else if (chip8->instruct.NN == 0xEE) {
                chip8->stack_ptr--;
                chip8->PC = *chip8->stack_ptr + 2;
                Serial.println("Returning from subroutine");
            } else {
                chip8->PC += 2;
            }
            break;
        case 0x1:
            chip8->PC = chip8->instruct.NNN;
            Serial.println("Jumping");
            break;
        case 0x2:
            *chip8->stack_ptr = chip8->PC + 2;
            chip8->stack_ptr++;
            chip8->PC = chip8->instruct.NNN;
            Serial.println("Going to subroutine");
            break;
        case 0x3:
            //if (Vx == NN)
            if(chip8->V[chip8->instruct.X] == chip8->instruct.NN){
              chip8->PC += 2;
            }
            chip8->PC += 2;
            Serial.println("Checking the Vx == NN condition");
            break;
        case 0x4:
            //if (Vx != NN)
            if(chip8->V[chip8->instruct.X] != chip8->instruct.NN){
              chip8->PC += 2;
            }
            chip8->PC += 2;
            Serial.println("Checking the Vx != NN condition");
            break;
        case 0x5:
            //if (Vx != NN)
            if(chip8->V[chip8->instruct.X] == chip8->V[chip8->instruct.Y]){
              chip8->PC += 2;
            }
            chip8->PC += 2;
            Serial.println("Checking the Vx == Vy condition");
            break;
        case 0x6: // 6XNN - Set VX
            chip8->V[chip8->instruct.X] = chip8->instruct.NN;
            chip8->PC += 2;
            Serial.println("Assigning NN value to Vx ");
            break;
        case 0x7:
            //Vx += NN
            chip8->V[chip8->instruct.X] += chip8->instruct.NN;
            chip8->PC += 2;
            Serial.println("Adding NN value to Vx ");
            break;
        case 0x8:
            switch(chip8->instruct.N){
              //vX = vY
              case 0x0: chip8->V[chip8->instruct.X] = chip8->V[chip8->instruct.Y];

                       Serial.println("Setting Vx value to Vy");
                       break;
              case 0x1: chip8->V[chip8->instruct.X] |= chip8->V[chip8->instruct.Y];
                        Serial.println("ORing Vx value with Vy");
                        break;
              case 0x2: chip8->V[chip8->instruct.X] &= chip8->V[chip8->instruct.Y];
                        Serial.println("ANDing Vx value with Vy");
                        break;
              case 0x3: chip8->V[chip8->instruct.X] ^= chip8->V[chip8->instruct.Y];
                        Serial.println("XORing Vx value with Vy");
                        break;
              case 0x4: uint16_t result = (uint16_t)chip8->V[chip8->instruct.X] + chip8->V[chip8->instruct.Y];
                        if(result > 255){
                          chip8->V[0xF] = 1;
                      }else{
                          chip8->V[0xF] = 0;
                      }
                      chip8->V[chip8->instruct.X] = result;
                      Serial.println("Adding Vx to Vy with carry flag");
                      break;
              case 0x5: if(chip8->V[chip8->instruct.X] < chip8->V[chip8->instruct.Y]){
                          chip8->V[0xF] = 0;
                      }else{
                          chip8->V[0xF] = 1;
                      }
                      chip8->V[chip8->instruct.X] -= chip8->V[chip8->instruct.Y];
                      Serial.println("Subtracting Vy from Vx with carry flag");
                      break;
              case 0x6: // 8XY6 - SHR Vx {, Vy}
                      chip8->V[0xF] = chip8->V[chip8->instruct.X] & 0x01;
                      chip8->V[chip8->instruct.X] >>= 1;
                      Serial.println("Shifting Vx right by 1");
                      break;
            
              case 0x7: // Vx = Vy - Vx
                      if(chip8->V[chip8->instruct.X]<chip8->V[chip8->instruct.Y]){
                         chip8->V[0xF] = 0;
                      }
                      else{
                         chip8->V[0xF] = 1;
                      }
                      chip8->V[chip8->instruct.X] = chip8->V[chip8->instruct.Y] - chip8->V[chip8->instruct.X];
                      Serial.println("Assigning Vx to Vy - Vx with carry flag");
                      break;
              case 0xE: // Vx <<= 1
                      chip8->V[0xF] = chip8->V[chip8->instruct.X] & 0x80;
                      chip8->V[chip8->instruct.X] <<= 1;
                      Serial.println(F("Shifting Vx left by 1"));
                      break;
            }
            chip8->PC += 2;
            break;
        case 0xA: // ANNN - Set I
            chip8->I = chip8->instruct.NNN;
            chip8->PC += 2;
            Serial.println("Set I");
            Serial.println(chip8->I);
            Serial.println(F("Byte at this address"));
            Serial.println(pgm_read_byte(chip8_rom + chip8->I), HEX);
            break;
        case 0xB:
            chip8->PC = chip8->V[0]+chip8->instruct.NNN;
            Serial.println("Setting PC to V[0]+address to an uncoditional flow");
            break;
        case 0xC: //Vx = rand() & NN
            chip8->V[chip8->instruct.X] = random(256) & chip8->instruct.NN; 
            chip8->PC += 2;
            Serial.println(F("Randing X"));
            break;
        case 0xD:
            chip8->V[0xF] = 0;
            for(int row = 0; row < chip8->instruct.N; row++){
              for(int col = 0; col < 8; col++){
                if((pgm_read_byte(chip8_rom + chip8->I+row)) & (0x80 >> col)){
                  if(oled.getPixel((chip8->V[chip8->instruct.X]+col)%64, (chip8->V[chip8->instruct.Y]+row)%32) == SSD1306_WHITE){
                    chip8->V[0xF] = 1;
                  }
                  oled.drawPixel((chip8->V[chip8->instruct.X]+col)%64, (chip8->V[chip8->instruct.Y]+row)%32, SSD1306_INVERSE);
                 Serial.println(F("Drawing at "));
                 Serial.println(pgm_read_byte(chip8_rom + chip8->I+row), HEX);
                  /*Serial.print(chip8->V[chip8->instruct.X]);
                  Serial.print(" ");
                  Serial.println(chip8->V[chip8->instruct.Y]);*/
                }
              }
            }
        oled.display();
        chip8->PC += 2;
        Serial.println("Drawing sprite");
        break;
        case 0xE:
            switch(chip8->instruct.N){
              case 0x1:
                    if(chip8->V[chip8->instruct.X] != key){
                      chip8->PC += 2;
                  }
              break;
              case 0xE:
                    if(chip8->V[chip8->instruct.X] == key){
                      chip8->PC += 2;
                    }
              break;
            }
        chip8->PC += 2;
        break;
        case 0xF:
            switch(chip8->instruct.NN){
              case 0x07:
                   chip8->V[chip8->instruct.X] = timer;
              break;
              case 0x0A:
                   while(key == 17){
                     if(Serial.available()>0){
                        check = Serial.read();
                        for(int i = 0; i < 16; i++){
                            if(check == pgm_read_byte(hexdecs + i)){
                               chip8->V[chip8->instruct.X] = i;
                               key = i;
                               break;
                            }
                        }
                     }
                   }   
              break;
            /*case 0x0C:
                   
                   
              break;*/
            }
        chip8->PC += 2;
        break;
        default:
            chip8->PC += 2;
            Serial.println("Dooin nuffin");
            break;
    }
}

void setup() {
    Serial.begin(9600);
    randomSeed(analogRead(A0));
    if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        while (true);
    }
    delay(2000);
    oled.clearDisplay();
    oled.setTextColor(WHITE);
    oled.setCursor(0, 0);
    oled.display();


    if (init_chip8()) {
        Serial.println("CHIP8 initialized successfully");
        //oled.println("CHIP8 initialized successfully");
        oled.display();
        delay(3000);
        oled.clearDisplay();
        oled.display();
    } else {
        Serial.println("Failed to initialize CHIP8");
        oled.println("Failed to initialize CHIP8");
        oled.display();
        while (true);
    }
    
}

void loop() {
    int current_time = micros();
    if(current_time - last_timer_update >= 16670){
      if(timer > 0){
        timer--;
      }
      if(sound_timer > 0){
        sound_timer--;
      }
      last_timer_update = current_time;
    }
if (Serial.available() > 0) {
  char incomingByte = Serial.read();

  // Ищем совпадение символа в массиве hexdecs
  for (int k = 0; k < 16; k++) {
    // Сравниваем полученный символ с ASCII-значением в массиве
    if (incomingByte == pgm_read_byte(hexdecs + k)) {
      key = k; // Устанавливаем порядковый номер клавиши
      break;   // Немедленно выходим из цикла после нахождения
    }
  }
}
      emulate_instruction(&chip8);
      key = 17;
}
